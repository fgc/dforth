preprocessor = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "address": parse_address,
        "anycharacter": parse_anycharacter,
        "braced": parse_braced,
        "bracketed": parse_bracketed,
        "dasm": parse_dasm,
        "dat": parse_dat,
        "defmacro": parse_defmacro,
        "identifier": parse_identifier,
        "identifierchar": parse_identifierchar,
        "identifierfirstchar": parse_identifierfirstchar,
        "identifiername": parse_identifiername,
        "instr1": parse_instr1,
        "instr2": parse_instr2,
        "keyword": parse_keyword,
        "label": parse_label,
        "linecomment": parse_linecomment,
        "lineterminator": parse_lineterminator,
        "literal": parse_literal,
        "macrobody": parse_macrobody,
        "macrocall": parse_macrocall,
        "nonbracecharacter": parse_nonbracecharacter,
        "nonbracketcharacter": parse_nonbracketcharacter,
        "op1": parse_op1,
        "op2": parse_op2,
        "operand": parse_operand,
        "register": parse_register,
        "reserved": parse_reserved,
        "str": parse_str,
        "unscapedquote": parse_unscapedquote,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "dasm";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_dasm() {
        var cacheKey = 'dasm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result9 = parse_op2();
        if (result9 !== null) {
          var result3 = result9;
        } else {
          var result8 = parse_op1();
          if (result8 !== null) {
            var result3 = result8;
          } else {
            var result7 = parse_dat();
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var result6 = parse_label();
              if (result6 !== null) {
                var result3 = result6;
              } else {
                var result5 = parse_defmacro();
                if (result5 !== null) {
                  var result3 = result5;
                } else {
                  var result4 = parse_macrocall();
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result9 = parse_op2();
            if (result9 !== null) {
              var result3 = result9;
            } else {
              var result8 = parse_op1();
              if (result8 !== null) {
                var result3 = result8;
              } else {
                var result7 = parse_dat();
                if (result7 !== null) {
                  var result3 = result7;
                } else {
                  var result6 = parse_label();
                  if (result6 !== null) {
                    var result3 = result6;
                  } else {
                    var result5 = parse_defmacro();
                    if (result5 !== null) {
                      var result3 = result5;
                    } else {
                      var result4 = parse_macrocall();
                      if (result4 !== null) {
                        var result3 = result4;
                      } else {
                        var result3 = null;;
                      };
                    };
                  };
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(lines) {
          	return lines.join("");
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_op2() {
        var cacheKey = 'op2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_instr2();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_operand();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = parse_operand();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result1 = [result3, result4, result5, result6, result7, result8, result9];
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr, op1, op2) {return instr.toLowerCase() + " " + op1 + ", " + op2 + "\n"})(result1[1], result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_op1() {
        var cacheKey = 'op1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_instr1();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_operand();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr, op) {return instr.toLowerCase() + " " + op + "\n";})(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_label() {
        var cacheKey = 'label@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_identifier();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(identifier) { console.log("label",identifier); return ":" + identifier + "\n";})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_braced() {
        var cacheKey = 'braced@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_braced();
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_nonbracecharacter();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            var result8 = parse_braced();
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_nonbracecharacter();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result5 = "}";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(parts) {
          	return parts.join("");
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonbracecharacter() {
        var cacheKey = 'nonbracecharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^{}]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^{}]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bracketed() {
        var cacheKey = 'bracketed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "[") {
          var result3 = "[";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_braced();
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_nonbracketcharacter();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            var result8 = parse_braced();
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_nonbracketcharacter();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result5 = "]";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(parts) {
          	return parts.join("");
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonbracketcharacter() {
        var cacheKey = 'nonbracketcharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^[\]]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^[\\]]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_defmacro() {
        var cacheKey = 'defmacro@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 9) === "#defmacro") {
            var result4 = "#defmacro";
            pos += 9;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"#defmacro\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_identifier();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result8 = "(";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result10 = [];
                      var savedPos2 = pos;
                      var result19 = parse_identifier();
                      if (result19 !== null) {
                        var result20 = parse__();
                        if (result20 !== null) {
                          var result18 = [result19, result20];
                        } else {
                          var result18 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result18 = null;
                        pos = savedPos2;
                      }
                      while (result18 !== null) {
                        result10.push(result18);
                        var savedPos2 = pos;
                        var result19 = parse_identifier();
                        if (result19 !== null) {
                          var result20 = parse__();
                          if (result20 !== null) {
                            var result18 = [result19, result20];
                          } else {
                            var result18 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result18 = null;
                          pos = savedPos2;
                        }
                      }
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result11 = ")";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            var result13 = parse_braced();
                            if (result13 !== null) {
                              var result14 = parse__();
                              if (result14 !== null) {
                                var result17 = parse_bracketed();
                                var result15 = result17 !== null ? result17 : '';
                                if (result15 !== null) {
                                  var result16 = parse__();
                                  if (result16 !== null) {
                                    var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, paramlist, body, env) {
          	console.log("macro!");
          	console.log("name:", name,"params", paramlist, "body", body);
          	var paramstr = "";
          	for (i in paramlist) {
          	    if (i > 0) {
          		paramstr += ", ";
          	    }
          	    paramstr += paramlist[i][0];
          	}
          	var macrodef = "";
          	if (env != undefined) {
          	    macrodef += env;
          	}
          	macrodef += "macros[\"" + name + "\"] = function (" + paramstr + ") {";
          	macrodef += body
          	macrodef += "}";
                  console.log("macrodef:",macrodef);
                  console.log("env:",env);
          	eval(macrodef);
          	return "";
          })(result1[3], result1[7], result1[10], result1[12])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_macrobody() {
        var cacheKey = 'macrobody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[^\]]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[^\\]]");
          }
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[^\]]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\]]");
            }
          }
        }
        var result2 = result1 !== null
          ? (function(macrobody) { return macrobody.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_macrocall() {
        var cacheKey = 'macrocall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_identifier();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result6 = "(";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = [];
                  if (input.substr(pos).match(/^[^)]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[^)]");
                    }
                  }
                  while (result12 !== null) {
                    result8.push(result12);
                    if (input.substr(pos).match(/^[^)]/) !== null) {
                      var result12 = input.charAt(pos);
                      pos++;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("[^)]");
                      }
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result10 = ")";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, params) {
          	
          	return eval ("macros[\"" + name + "\"](" + params.join("")+")");
              })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instr2() {
        var cacheKey = 'instr2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "set") {
          var result35 = "set";
          pos += 3;
        } else {
          var result35 = null;
          if (reportMatchFailures) {
            matchFailed("\"set\"");
          }
        }
        if (result35 !== null) {
          var result3 = result35;
        } else {
          if (input.substr(pos, 3) === "SET") {
            var result34 = "SET";
            pos += 3;
          } else {
            var result34 = null;
            if (reportMatchFailures) {
              matchFailed("\"SET\"");
            }
          }
          if (result34 !== null) {
            var result3 = result34;
          } else {
            if (input.substr(pos, 3) === "add") {
              var result33 = "add";
              pos += 3;
            } else {
              var result33 = null;
              if (reportMatchFailures) {
                matchFailed("\"add\"");
              }
            }
            if (result33 !== null) {
              var result3 = result33;
            } else {
              if (input.substr(pos, 3) === "ADD") {
                var result32 = "ADD";
                pos += 3;
              } else {
                var result32 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ADD\"");
                }
              }
              if (result32 !== null) {
                var result3 = result32;
              } else {
                if (input.substr(pos, 3) === "sub") {
                  var result31 = "sub";
                  pos += 3;
                } else {
                  var result31 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"sub\"");
                  }
                }
                if (result31 !== null) {
                  var result3 = result31;
                } else {
                  if (input.substr(pos, 3) === "SUB") {
                    var result30 = "SUB";
                    pos += 3;
                  } else {
                    var result30 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"SUB\"");
                    }
                  }
                  if (result30 !== null) {
                    var result3 = result30;
                  } else {
                    if (input.substr(pos, 3) === "mul") {
                      var result29 = "mul";
                      pos += 3;
                    } else {
                      var result29 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"mul\"");
                      }
                    }
                    if (result29 !== null) {
                      var result3 = result29;
                    } else {
                      if (input.substr(pos, 3) === "MUL") {
                        var result28 = "MUL";
                        pos += 3;
                      } else {
                        var result28 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"MUL\"");
                        }
                      }
                      if (result28 !== null) {
                        var result3 = result28;
                      } else {
                        if (input.substr(pos, 3) === "div") {
                          var result27 = "div";
                          pos += 3;
                        } else {
                          var result27 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"div\"");
                          }
                        }
                        if (result27 !== null) {
                          var result3 = result27;
                        } else {
                          if (input.substr(pos, 3) === "DIV") {
                            var result26 = "DIV";
                            pos += 3;
                          } else {
                            var result26 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"DIV\"");
                            }
                          }
                          if (result26 !== null) {
                            var result3 = result26;
                          } else {
                            if (input.substr(pos, 3) === "mod") {
                              var result25 = "mod";
                              pos += 3;
                            } else {
                              var result25 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"mod\"");
                              }
                            }
                            if (result25 !== null) {
                              var result3 = result25;
                            } else {
                              if (input.substr(pos, 3) === "MOD") {
                                var result24 = "MOD";
                                pos += 3;
                              } else {
                                var result24 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"MOD\"");
                                }
                              }
                              if (result24 !== null) {
                                var result3 = result24;
                              } else {
                                if (input.substr(pos, 3) === "shl") {
                                  var result23 = "shl";
                                  pos += 3;
                                } else {
                                  var result23 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"shl\"");
                                  }
                                }
                                if (result23 !== null) {
                                  var result3 = result23;
                                } else {
                                  if (input.substr(pos, 3) === "SHL") {
                                    var result22 = "SHL";
                                    pos += 3;
                                  } else {
                                    var result22 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"SHL\"");
                                    }
                                  }
                                  if (result22 !== null) {
                                    var result3 = result22;
                                  } else {
                                    if (input.substr(pos, 3) === "shr") {
                                      var result21 = "shr";
                                      pos += 3;
                                    } else {
                                      var result21 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"shr\"");
                                      }
                                    }
                                    if (result21 !== null) {
                                      var result3 = result21;
                                    } else {
                                      if (input.substr(pos, 3) === "SHR") {
                                        var result20 = "SHR";
                                        pos += 3;
                                      } else {
                                        var result20 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"SHR\"");
                                        }
                                      }
                                      if (result20 !== null) {
                                        var result3 = result20;
                                      } else {
                                        if (input.substr(pos, 3) === "and") {
                                          var result19 = "and";
                                          pos += 3;
                                        } else {
                                          var result19 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"and\"");
                                          }
                                        }
                                        if (result19 !== null) {
                                          var result3 = result19;
                                        } else {
                                          if (input.substr(pos, 3) === "AND") {
                                            var result18 = "AND";
                                            pos += 3;
                                          } else {
                                            var result18 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"AND\"");
                                            }
                                          }
                                          if (result18 !== null) {
                                            var result3 = result18;
                                          } else {
                                            if (input.substr(pos, 3) === "bor") {
                                              var result17 = "bor";
                                              pos += 3;
                                            } else {
                                              var result17 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"bor\"");
                                              }
                                            }
                                            if (result17 !== null) {
                                              var result3 = result17;
                                            } else {
                                              if (input.substr(pos, 3) === "BOR") {
                                                var result16 = "BOR";
                                                pos += 3;
                                              } else {
                                                var result16 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"BOR\"");
                                                }
                                              }
                                              if (result16 !== null) {
                                                var result3 = result16;
                                              } else {
                                                if (input.substr(pos, 3) === "xor") {
                                                  var result15 = "xor";
                                                  pos += 3;
                                                } else {
                                                  var result15 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"xor\"");
                                                  }
                                                }
                                                if (result15 !== null) {
                                                  var result3 = result15;
                                                } else {
                                                  if (input.substr(pos, 3) === "XOR") {
                                                    var result14 = "XOR";
                                                    pos += 3;
                                                  } else {
                                                    var result14 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\"XOR\"");
                                                    }
                                                  }
                                                  if (result14 !== null) {
                                                    var result3 = result14;
                                                  } else {
                                                    if (input.substr(pos, 3) === "ife") {
                                                      var result13 = "ife";
                                                      pos += 3;
                                                    } else {
                                                      var result13 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\"ife\"");
                                                      }
                                                    }
                                                    if (result13 !== null) {
                                                      var result3 = result13;
                                                    } else {
                                                      if (input.substr(pos, 3) === "IFE") {
                                                        var result12 = "IFE";
                                                        pos += 3;
                                                      } else {
                                                        var result12 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\"IFE\"");
                                                        }
                                                      }
                                                      if (result12 !== null) {
                                                        var result3 = result12;
                                                      } else {
                                                        if (input.substr(pos, 3) === "ifn") {
                                                          var result11 = "ifn";
                                                          pos += 3;
                                                        } else {
                                                          var result11 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\"ifn\"");
                                                          }
                                                        }
                                                        if (result11 !== null) {
                                                          var result3 = result11;
                                                        } else {
                                                          if (input.substr(pos, 3) === "IFN") {
                                                            var result10 = "IFN";
                                                            pos += 3;
                                                          } else {
                                                            var result10 = null;
                                                            if (reportMatchFailures) {
                                                              matchFailed("\"IFN\"");
                                                            }
                                                          }
                                                          if (result10 !== null) {
                                                            var result3 = result10;
                                                          } else {
                                                            if (input.substr(pos, 3) === "ifg") {
                                                              var result9 = "ifg";
                                                              pos += 3;
                                                            } else {
                                                              var result9 = null;
                                                              if (reportMatchFailures) {
                                                                matchFailed("\"ifg\"");
                                                              }
                                                            }
                                                            if (result9 !== null) {
                                                              var result3 = result9;
                                                            } else {
                                                              if (input.substr(pos, 3) === "IFG") {
                                                                var result8 = "IFG";
                                                                pos += 3;
                                                              } else {
                                                                var result8 = null;
                                                                if (reportMatchFailures) {
                                                                  matchFailed("\"IFG\"");
                                                                }
                                                              }
                                                              if (result8 !== null) {
                                                                var result3 = result8;
                                                              } else {
                                                                if (input.substr(pos, 3) === "ifb") {
                                                                  var result7 = "ifb";
                                                                  pos += 3;
                                                                } else {
                                                                  var result7 = null;
                                                                  if (reportMatchFailures) {
                                                                    matchFailed("\"ifb\"");
                                                                  }
                                                                }
                                                                if (result7 !== null) {
                                                                  var result3 = result7;
                                                                } else {
                                                                  if (input.substr(pos, 3) === "IFB") {
                                                                    var result6 = "IFB";
                                                                    pos += 3;
                                                                  } else {
                                                                    var result6 = null;
                                                                    if (reportMatchFailures) {
                                                                      matchFailed("\"IFB\"");
                                                                    }
                                                                  }
                                                                  if (result6 !== null) {
                                                                    var result3 = result6;
                                                                  } else {
                                                                    var result3 = null;;
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_identifierchar();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr2) { return instr2; })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instr1() {
        var cacheKey = 'instr1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "jsr") {
          var result7 = "jsr";
          pos += 3;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"jsr\"");
          }
        }
        if (result7 !== null) {
          var result3 = result7;
        } else {
          if (input.substr(pos, 3) === "JSR") {
            var result6 = "JSR";
            pos += 3;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"JSR\"");
            }
          }
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_identifierchar();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr1) { return instr1; })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dat() {
        var cacheKey = 'dat@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 3) === "dat") {
          var result20 = "dat";
          pos += 3;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"dat\"");
          }
        }
        if (result20 !== null) {
          var result3 = result20;
        } else {
          if (input.substr(pos, 3) === "DAT") {
            var result19 = "DAT";
            pos += 3;
          } else {
            var result19 = null;
            if (reportMatchFailures) {
              matchFailed("\"DAT\"");
            }
          }
          if (result19 !== null) {
            var result3 = result19;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result18 = parse_identifierchar();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result18 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos3;
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result17 = parse_literal();
              if (result17 !== null) {
                var result6 = result17;
              } else {
                var result16 = parse_identifier();
                if (result16 !== null) {
                  var result6 = result16;
                } else {
                  var result15 = parse_str();
                  if (result15 !== null) {
                    var result6 = result15;
                  } else {
                    var result6 = null;;
                  };
                };
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = [];
                  var savedPos2 = pos;
                  var result14 = parse_literal();
                  if (result14 !== null) {
                    var result10 = result14;
                  } else {
                    var result13 = parse_identifier();
                    if (result13 !== null) {
                      var result10 = result13;
                    } else {
                      var result12 = parse_str();
                      if (result12 !== null) {
                        var result10 = result12;
                      } else {
                        var result10 = null;;
                      };
                    };
                  }
                  if (result10 !== null) {
                    var result11 = parse__();
                    if (result11 !== null) {
                      var result9 = [result10, result11];
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result9 = null;
                    pos = savedPos2;
                  }
                  while (result9 !== null) {
                    result8.push(result9);
                    var savedPos2 = pos;
                    var result14 = parse_literal();
                    if (result14 !== null) {
                      var result10 = result14;
                    } else {
                      var result13 = parse_identifier();
                      if (result13 !== null) {
                        var result10 = result13;
                      } else {
                        var result12 = parse_str();
                        if (result12 !== null) {
                          var result10 = result12;
                        } else {
                          var result10 = null;;
                        };
                      };
                    }
                    if (result10 !== null) {
                      var result11 = parse__();
                      if (result11 !== null) {
                        var result9 = [result10, result11];
                      } else {
                        var result9 = null;
                        pos = savedPos2;
                      }
                    } else {
                      var result9 = null;
                      pos = savedPos2;
                    }
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) {
              var r = "dat " + first + "\n";
              for (d in rest) {
          	r += "dat " + rest[d][0] + "\n";
              }
              return r;
          })(result1[3], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_reserved() {
        var cacheKey = 'reserved@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_register();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_instr1();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_instr2();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_dat();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_keyword();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_register() {
        var cacheKey = 'register@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "a") {
          var result21 = "a";
          pos += 1;
        } else {
          var result21 = null;
          if (reportMatchFailures) {
            matchFailed("\"a\"");
          }
        }
        if (result21 !== null) {
          var result3 = result21;
        } else {
          if (input.substr(pos, 1) === "A") {
            var result20 = "A";
            pos += 1;
          } else {
            var result20 = null;
            if (reportMatchFailures) {
              matchFailed("\"A\"");
            }
          }
          if (result20 !== null) {
            var result3 = result20;
          } else {
            if (input.substr(pos, 1) === "b") {
              var result19 = "b";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"b\"");
              }
            }
            if (result19 !== null) {
              var result3 = result19;
            } else {
              if (input.substr(pos, 1) === "B") {
                var result18 = "B";
                pos += 1;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"B\"");
                }
              }
              if (result18 !== null) {
                var result3 = result18;
              } else {
                if (input.substr(pos, 1) === "c") {
                  var result17 = "c";
                  pos += 1;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"c\"");
                  }
                }
                if (result17 !== null) {
                  var result3 = result17;
                } else {
                  if (input.substr(pos, 1) === "C") {
                    var result16 = "C";
                    pos += 1;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"C\"");
                    }
                  }
                  if (result16 !== null) {
                    var result3 = result16;
                  } else {
                    if (input.substr(pos, 1) === "x") {
                      var result15 = "x";
                      pos += 1;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"x\"");
                      }
                    }
                    if (result15 !== null) {
                      var result3 = result15;
                    } else {
                      if (input.substr(pos, 1) === "X") {
                        var result14 = "X";
                        pos += 1;
                      } else {
                        var result14 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"X\"");
                        }
                      }
                      if (result14 !== null) {
                        var result3 = result14;
                      } else {
                        if (input.substr(pos, 1) === "y") {
                          var result13 = "y";
                          pos += 1;
                        } else {
                          var result13 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"y\"");
                          }
                        }
                        if (result13 !== null) {
                          var result3 = result13;
                        } else {
                          if (input.substr(pos, 1) === "Y") {
                            var result12 = "Y";
                            pos += 1;
                          } else {
                            var result12 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"Y\"");
                            }
                          }
                          if (result12 !== null) {
                            var result3 = result12;
                          } else {
                            if (input.substr(pos, 1) === "z") {
                              var result11 = "z";
                              pos += 1;
                            } else {
                              var result11 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"z\"");
                              }
                            }
                            if (result11 !== null) {
                              var result3 = result11;
                            } else {
                              if (input.substr(pos, 1) === "Z") {
                                var result10 = "Z";
                                pos += 1;
                              } else {
                                var result10 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"Z\"");
                                }
                              }
                              if (result10 !== null) {
                                var result3 = result10;
                              } else {
                                if (input.substr(pos, 1) === "i") {
                                  var result9 = "i";
                                  pos += 1;
                                } else {
                                  var result9 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"i\"");
                                  }
                                }
                                if (result9 !== null) {
                                  var result3 = result9;
                                } else {
                                  if (input.substr(pos, 1) === "I") {
                                    var result8 = "I";
                                    pos += 1;
                                  } else {
                                    var result8 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"I\"");
                                    }
                                  }
                                  if (result8 !== null) {
                                    var result3 = result8;
                                  } else {
                                    if (input.substr(pos, 1) === "j") {
                                      var result7 = "j";
                                      pos += 1;
                                    } else {
                                      var result7 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"j\"");
                                      }
                                    }
                                    if (result7 !== null) {
                                      var result3 = result7;
                                    } else {
                                      if (input.substr(pos, 1) === "J") {
                                        var result6 = "J";
                                        pos += 1;
                                      } else {
                                        var result6 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"J\"");
                                        }
                                      }
                                      if (result6 !== null) {
                                        var result3 = result6;
                                      } else {
                                        var result3 = null;;
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_identifierchar();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(register) { 
          	console.log("Found register:",register); 
          	return register.toLowerCase(); 
              })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_keyword() {
        var cacheKey = 'keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "sp") {
          var result15 = "sp";
          pos += 2;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"sp\"");
          }
        }
        if (result15 !== null) {
          var result3 = result15;
        } else {
          if (input.substr(pos, 2) === "SP") {
            var result14 = "SP";
            pos += 2;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"SP\"");
            }
          }
          if (result14 !== null) {
            var result3 = result14;
          } else {
            if (input.substr(pos, 2) === "pc") {
              var result13 = "pc";
              pos += 2;
            } else {
              var result13 = null;
              if (reportMatchFailures) {
                matchFailed("\"pc\"");
              }
            }
            if (result13 !== null) {
              var result3 = result13;
            } else {
              if (input.substr(pos, 2) === "PC") {
                var result12 = "PC";
                pos += 2;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"PC\"");
                }
              }
              if (result12 !== null) {
                var result3 = result12;
              } else {
                if (input.substr(pos, 4) === "push") {
                  var result11 = "push";
                  pos += 4;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"push\"");
                  }
                }
                if (result11 !== null) {
                  var result3 = result11;
                } else {
                  if (input.substr(pos, 4) === "PUSH") {
                    var result10 = "PUSH";
                    pos += 4;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"PUSH\"");
                    }
                  }
                  if (result10 !== null) {
                    var result3 = result10;
                  } else {
                    if (input.substr(pos, 3) === "pop") {
                      var result9 = "pop";
                      pos += 3;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"pop\"");
                      }
                    }
                    if (result9 !== null) {
                      var result3 = result9;
                    } else {
                      if (input.substr(pos, 3) === "POP") {
                        var result8 = "POP";
                        pos += 3;
                      } else {
                        var result8 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"POP\"");
                        }
                      }
                      if (result8 !== null) {
                        var result3 = result8;
                      } else {
                        if (input.substr(pos, 4) === "peek") {
                          var result7 = "peek";
                          pos += 4;
                        } else {
                          var result7 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"peek\"");
                          }
                        }
                        if (result7 !== null) {
                          var result3 = result7;
                        } else {
                          if (input.substr(pos, 4) === "PEEK") {
                            var result6 = "PEEK";
                            pos += 4;
                          } else {
                            var result6 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"PEEK\"");
                            }
                          }
                          if (result6 !== null) {
                            var result3 = result6;
                          } else {
                            var result3 = null;;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_identifierchar();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(keyword) { 
          	console.log("Found keyword:",keyword); 
          	return keyword.toLowerCase(); 
              })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result5 = parse_reserved();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          var result4 = parse_identifiername();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(identifier) { return identifier;})(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifiername() {
        var cacheKey = 'identifiername@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifierfirstchar();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_identifierchar();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_identifierchar();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) {
          	return first + rest.join("");
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifierfirstchar() {
        var cacheKey = 'identifierfirstchar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifierchar() {
        var cacheKey = 'identifierchar@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z0-9_]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operand() {
        var cacheKey = 'operand@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result5 = parse_register();
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var result4 = parse_keyword();
          if (result4 !== null) {
            var result0 = result4;
          } else {
            var result3 = parse_identifier();
            if (result3 !== null) {
              var result0 = result3;
            } else {
              var result2 = parse_literal();
              if (result2 !== null) {
                var result0 = result2;
              } else {
                var result1 = parse_address();
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_address() {
        var cacheKey = 'address@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos8 = pos;
        var savedPos9 = pos;
        if (input.substr(pos, 1) === "[") {
          var result51 = "[";
          pos += 1;
        } else {
          var result51 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result51 !== null) {
          var result52 = parse__();
          if (result52 !== null) {
            var result53 = parse_literal();
            if (result53 !== null) {
              var result54 = parse__();
              if (result54 !== null) {
                if (input.substr(pos, 1) === "+") {
                  var result55 = "+";
                  pos += 1;
                } else {
                  var result55 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+\"");
                  }
                }
                if (result55 !== null) {
                  var result56 = parse__();
                  if (result56 !== null) {
                    var result57 = parse_register();
                    if (result57 !== null) {
                      var result58 = parse__();
                      if (result58 !== null) {
                        if (input.substr(pos, 1) === "]") {
                          var result59 = "]";
                          pos += 1;
                        } else {
                          var result59 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result59 !== null) {
                          var result49 = [result51, result52, result53, result54, result55, result56, result57, result58, result59];
                        } else {
                          var result49 = null;
                          pos = savedPos9;
                        }
                      } else {
                        var result49 = null;
                        pos = savedPos9;
                      }
                    } else {
                      var result49 = null;
                      pos = savedPos9;
                    }
                  } else {
                    var result49 = null;
                    pos = savedPos9;
                  }
                } else {
                  var result49 = null;
                  pos = savedPos9;
                }
              } else {
                var result49 = null;
                pos = savedPos9;
              }
            } else {
              var result49 = null;
              pos = savedPos9;
            }
          } else {
            var result49 = null;
            pos = savedPos9;
          }
        } else {
          var result49 = null;
          pos = savedPos9;
        }
        var result50 = result49 !== null
          ? (function(literal, register) {return "[" + literal + " + " + register + "]";})(result49[2], result49[6])
          : null;
        if (result50 !== null) {
          var result48 = result50;
        } else {
          var result48 = null;
          pos = savedPos8;
        }
        if (result48 !== null) {
          var result0 = result48;
        } else {
          var savedPos6 = pos;
          var savedPos7 = pos;
          if (input.substr(pos, 1) === "[") {
            var result39 = "[";
            pos += 1;
          } else {
            var result39 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result39 !== null) {
            var result40 = parse__();
            if (result40 !== null) {
              var result41 = parse_register();
              if (result41 !== null) {
                var result42 = parse__();
                if (result42 !== null) {
                  if (input.substr(pos, 1) === "+") {
                    var result43 = "+";
                    pos += 1;
                  } else {
                    var result43 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (result43 !== null) {
                    var result44 = parse__();
                    if (result44 !== null) {
                      var result45 = parse_literal();
                      if (result45 !== null) {
                        var result46 = parse__();
                        if (result46 !== null) {
                          if (input.substr(pos, 1) === "]") {
                            var result47 = "]";
                            pos += 1;
                          } else {
                            var result47 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (result47 !== null) {
                            var result37 = [result39, result40, result41, result42, result43, result44, result45, result46, result47];
                          } else {
                            var result37 = null;
                            pos = savedPos7;
                          }
                        } else {
                          var result37 = null;
                          pos = savedPos7;
                        }
                      } else {
                        var result37 = null;
                        pos = savedPos7;
                      }
                    } else {
                      var result37 = null;
                      pos = savedPos7;
                    }
                  } else {
                    var result37 = null;
                    pos = savedPos7;
                  }
                } else {
                  var result37 = null;
                  pos = savedPos7;
                }
              } else {
                var result37 = null;
                pos = savedPos7;
              }
            } else {
              var result37 = null;
              pos = savedPos7;
            }
          } else {
            var result37 = null;
            pos = savedPos7;
          }
          var result38 = result37 !== null
            ? (function(register, literal) {return "[" + literal + " + " + register + "]";})(result37[2], result37[6])
            : null;
          if (result38 !== null) {
            var result36 = result38;
          } else {
            var result36 = null;
            pos = savedPos6;
          }
          if (result36 !== null) {
            var result0 = result36;
          } else {
            var savedPos4 = pos;
            var savedPos5 = pos;
            if (input.substr(pos, 1) === "[") {
              var result27 = "[";
              pos += 1;
            } else {
              var result27 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result27 !== null) {
              var result28 = parse__();
              if (result28 !== null) {
                var result29 = parse_identifier();
                if (result29 !== null) {
                  var result30 = parse__();
                  if (result30 !== null) {
                    if (input.substr(pos, 1) === "+") {
                      var result31 = "+";
                      pos += 1;
                    } else {
                      var result31 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"+\"");
                      }
                    }
                    if (result31 !== null) {
                      var result32 = parse__();
                      if (result32 !== null) {
                        var result33 = parse_register();
                        if (result33 !== null) {
                          var result34 = parse__();
                          if (result34 !== null) {
                            if (input.substr(pos, 1) === "]") {
                              var result35 = "]";
                              pos += 1;
                            } else {
                              var result35 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"]\"");
                              }
                            }
                            if (result35 !== null) {
                              var result25 = [result27, result28, result29, result30, result31, result32, result33, result34, result35];
                            } else {
                              var result25 = null;
                              pos = savedPos5;
                            }
                          } else {
                            var result25 = null;
                            pos = savedPos5;
                          }
                        } else {
                          var result25 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result25 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result25 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result25 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result25 = null;
                  pos = savedPos5;
                }
              } else {
                var result25 = null;
                pos = savedPos5;
              }
            } else {
              var result25 = null;
              pos = savedPos5;
            }
            var result26 = result25 !== null
              ? (function(identifier, register) {return "[" + identifier + " + " + register + "]";})(result25[2], result25[6])
              : null;
            if (result26 !== null) {
              var result24 = result26;
            } else {
              var result24 = null;
              pos = savedPos4;
            }
            if (result24 !== null) {
              var result0 = result24;
            } else {
              var savedPos2 = pos;
              var savedPos3 = pos;
              if (input.substr(pos, 1) === "[") {
                var result15 = "[";
                pos += 1;
              } else {
                var result15 = null;
                if (reportMatchFailures) {
                  matchFailed("\"[\"");
                }
              }
              if (result15 !== null) {
                var result16 = parse__();
                if (result16 !== null) {
                  var result17 = parse_register();
                  if (result17 !== null) {
                    var result18 = parse__();
                    if (result18 !== null) {
                      if (input.substr(pos, 1) === "+") {
                        var result19 = "+";
                        pos += 1;
                      } else {
                        var result19 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"+\"");
                        }
                      }
                      if (result19 !== null) {
                        var result20 = parse__();
                        if (result20 !== null) {
                          var result21 = parse_identifier();
                          if (result21 !== null) {
                            var result22 = parse__();
                            if (result22 !== null) {
                              if (input.substr(pos, 1) === "]") {
                                var result23 = "]";
                                pos += 1;
                              } else {
                                var result23 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"]\"");
                                }
                              }
                              if (result23 !== null) {
                                var result13 = [result15, result16, result17, result18, result19, result20, result21, result22, result23];
                              } else {
                                var result13 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result13 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result13 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result13 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result13 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result13 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result13 = null;
                  pos = savedPos3;
                }
              } else {
                var result13 = null;
                pos = savedPos3;
              }
              var result14 = result13 !== null
                ? (function(register, identifier) {return "[" + identifier + " + " + register + "]";})(result13[2], result13[6])
                : null;
              if (result14 !== null) {
                var result12 = result14;
              } else {
                var result12 = null;
                pos = savedPos2;
              }
              if (result12 !== null) {
                var result0 = result12;
              } else {
                var savedPos0 = pos;
                var savedPos1 = pos;
                if (input.substr(pos, 1) === "[") {
                  var result4 = "[";
                  pos += 1;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"[\"");
                  }
                }
                if (result4 !== null) {
                  var result5 = parse__();
                  if (result5 !== null) {
                    var result11 = parse_register();
                    if (result11 !== null) {
                      var result6 = result11;
                    } else {
                      var result10 = parse_identifier();
                      if (result10 !== null) {
                        var result6 = result10;
                      } else {
                        var result9 = parse_literal();
                        if (result9 !== null) {
                          var result6 = result9;
                        } else {
                          var result6 = null;;
                        };
                      };
                    }
                    if (result6 !== null) {
                      var result7 = parse__();
                      if (result7 !== null) {
                        if (input.substr(pos, 1) === "]") {
                          var result8 = "]";
                          pos += 1;
                        } else {
                          var result8 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result8 !== null) {
                          var result2 = [result4, result5, result6, result7, result8];
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
                var result3 = result2 !== null
                  ? (function(address) {return "[" + address + "]";})(result2[2])
                  : null;
                if (result3 !== null) {
                  var result1 = result3;
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9A-Fa-fx]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9A-Fa-fx]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9A-Fa-fx]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9A-Fa-fx]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) {return digits.join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_str() {
        var cacheKey = 'str@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var savedPos3 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result9 = parse_unscapedquote();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result9 === null) {
            var result7 = '';
          } else {
            var result7 = null;
            pos = savedPos3;
          }
          if (result7 !== null) {
            var result8 = parse_anycharacter();
            if (result8 !== null) {
              var result6 = [result7, result8];
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          } else {
            var result6 = null;
            pos = savedPos2;
          }
          while (result6 !== null) {
            result4.push(result6);
            var savedPos2 = pos;
            var savedPos3 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result9 = parse_unscapedquote();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result9 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos3;
            }
            if (result7 !== null) {
              var result8 = parse_anycharacter();
              if (result8 !== null) {
                var result6 = [result7, result8];
              } else {
                var result6 = null;
                pos = savedPos2;
              }
            } else {
              var result6 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result5 = parse_unscapedquote();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(str, last) {
          	var r = "";
          	for (var c in str) {
          	    r += str[c][1];
          	}
          	return "\"" + r + last  +"\""; 
              })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unscapedquote() {
        var cacheKey = 'unscapedquote@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[^\\]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[^\\\\]");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos, 1) === "\"") {
            var result4 = "\"";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\"\"");
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(last) {return last;})(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result4 = parse_whitespace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_lineterminator();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_linecomment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_whitespace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_lineterminator();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_linecomment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[	 \xA0\uFEFF,]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[	 \\xA0\\uFEFF,]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lineterminator() {
        var cacheKey = 'lineterminator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_linecomment() {
        var cacheKey = 'linecomment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ";") {
          var result1 = ";";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\";\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_lineterminator();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result5 = parse_anycharacter();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_lineterminator();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              var result5 = parse_anycharacter();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anycharacter() {
        var cacheKey = 'anycharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.length > pos) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        macros = {};
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
