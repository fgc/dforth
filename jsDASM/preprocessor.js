preprocessor = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "address": parse_address,
        "anyCharacter": parse_anyCharacter,
        "braced": parse_braced,
        "bracketed": parse_bracketed,
        "dasm": parse_dasm,
        "defmacro": parse_defmacro,
        "instr1": parse_instr1,
        "instr2": parse_instr2,
        "label": parse_label,
        "lineComment": parse_lineComment,
        "lineTerminator": parse_lineTerminator,
        "literal": parse_literal,
        "macrobody": parse_macrobody,
        "macrocall": parse_macrocall,
        "nonBraceCharacter": parse_nonBraceCharacter,
        "nonBracketCharacter": parse_nonBracketCharacter,
        "op1": parse_op1,
        "op2": parse_op2,
        "operand": parse_operand,
        "other": parse_other,
        "special": parse_special,
        "symbol": parse_symbol,
        "whiteSpace": parse_whiteSpace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "dasm";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_dasm() {
        var cacheKey = 'dasm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result8 = parse_op2();
        if (result8 !== null) {
          var result3 = result8;
        } else {
          var result7 = parse_op1();
          if (result7 !== null) {
            var result3 = result7;
          } else {
            var result6 = parse_label();
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result5 = parse_defmacro();
              if (result5 !== null) {
                var result3 = result5;
              } else {
                var result4 = parse_macrocall();
                if (result4 !== null) {
                  var result3 = result4;
                } else {
                  var result3 = null;;
                };
              };
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result8 = parse_op2();
            if (result8 !== null) {
              var result3 = result8;
            } else {
              var result7 = parse_op1();
              if (result7 !== null) {
                var result3 = result7;
              } else {
                var result6 = parse_label();
                if (result6 !== null) {
                  var result3 = result6;
                } else {
                  var result5 = parse_defmacro();
                  if (result5 !== null) {
                    var result3 = result5;
                  } else {
                    var result4 = parse_macrocall();
                    if (result4 !== null) {
                      var result3 = result4;
                    } else {
                      var result3 = null;;
                    };
                  };
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(lines) {
          	return lines.join("");
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_op2() {
        var cacheKey = 'op2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_instr2();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_operand();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ",") {
                    var result8 = ",";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result10 = parse_operand();
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr, op1, op2) {return instr.toLowerCase() + " " + op1 + ", " + op2 + "\n"})(result1[1], result1[3], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_op1() {
        var cacheKey = 'op1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_instr1();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_operand();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr, op) {return instr.toLowerCase() + " " + op + "\n";})(result1[1], result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_label() {
        var cacheKey = 'label@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_symbol();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(symbol) { console.log("label",symbol); return ":" + symbol + "\n";})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_braced() {
        var cacheKey = 'braced@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_braced();
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_nonBraceCharacter();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            var result8 = parse_braced();
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_nonBraceCharacter();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "}") {
              var result5 = "}";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"}\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(parts) {
          	return parts.join("");
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonBraceCharacter() {
        var cacheKey = 'nonBraceCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^{}]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^{}]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_bracketed() {
        var cacheKey = 'bracketed@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "[") {
          var result3 = "[";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          var result8 = parse_braced();
          if (result8 !== null) {
            var result6 = result8;
          } else {
            var result7 = parse_nonBracketCharacter();
            if (result7 !== null) {
              var result6 = result7;
            } else {
              var result6 = null;;
            };
          }
          while (result6 !== null) {
            result4.push(result6);
            var result8 = parse_braced();
            if (result8 !== null) {
              var result6 = result8;
            } else {
              var result7 = parse_nonBracketCharacter();
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "]") {
              var result5 = "]";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"]\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(parts) {
          	return parts.join("");
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_nonBracketCharacter() {
        var cacheKey = 'nonBracketCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[^[\]]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[^[\\]]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_defmacro() {
        var cacheKey = 'defmacro@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 9) === "#defmacro") {
            var result4 = "#defmacro";
            pos += 9;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"#defmacro\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_symbol();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === "(") {
                    var result8 = "(";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result10 = [];
                      var savedPos2 = pos;
                      var result19 = parse_symbol();
                      if (result19 !== null) {
                        var result20 = parse__();
                        if (result20 !== null) {
                          var result18 = [result19, result20];
                        } else {
                          var result18 = null;
                          pos = savedPos2;
                        }
                      } else {
                        var result18 = null;
                        pos = savedPos2;
                      }
                      while (result18 !== null) {
                        result10.push(result18);
                        var savedPos2 = pos;
                        var result19 = parse_symbol();
                        if (result19 !== null) {
                          var result20 = parse__();
                          if (result20 !== null) {
                            var result18 = [result19, result20];
                          } else {
                            var result18 = null;
                            pos = savedPos2;
                          }
                        } else {
                          var result18 = null;
                          pos = savedPos2;
                        }
                      }
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result11 = ")";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            var result13 = parse_braced();
                            if (result13 !== null) {
                              var result14 = parse__();
                              if (result14 !== null) {
                                var result17 = parse_bracketed();
                                var result15 = result17 !== null ? result17 : '';
                                if (result15 !== null) {
                                  var result16 = parse__();
                                  if (result16 !== null) {
                                    var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, paramlist, body, env) {
          	console.log("macro!");
          	console.log("name:", name,"params", paramlist, "body", body);
          	var paramstr = "";
          	for (i in paramlist) {
          	    if (i > 0) {
          		paramstr += ", ";
          	    }
          	    paramstr += paramlist[i][0];
          	}
          	var macrodef = "";
          	if (env != undefined) {
          	    macrodef += env;
          	}
          	macrodef += "macros[\"" + name + "\"] = function (" + paramstr + ") {";
          	macrodef += body
          	macrodef += "}";
                  console.log("macrodef:",macrodef);
                  console.log("env:",env);
          	eval(macrodef);
          	return "";
          })(result1[3], result1[7], result1[10], result1[12])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_macrobody() {
        var cacheKey = 'macrobody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = [];
        if (input.substr(pos).match(/^[^\]]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[^\\]]");
          }
        }
        while (result3 !== null) {
          result1.push(result3);
          if (input.substr(pos).match(/^[^\]]/) !== null) {
            var result3 = input.charAt(pos);
            pos++;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("[^\\]]");
            }
          }
        }
        var result2 = result1 !== null
          ? (function(macrobody) { return macrobody.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_macrocall() {
        var cacheKey = 'macrocall@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_symbol();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result6 = "(";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = [];
                  if (input.substr(pos).match(/^[^)]/) !== null) {
                    var result12 = input.charAt(pos);
                    pos++;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("[^)]");
                    }
                  }
                  while (result12 !== null) {
                    result8.push(result12);
                    if (input.substr(pos).match(/^[^)]/) !== null) {
                      var result12 = input.charAt(pos);
                      pos++;
                    } else {
                      var result12 = null;
                      if (reportMatchFailures) {
                        matchFailed("[^)]");
                      }
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result10 = ")";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, params) {
          	
          	return eval ("macros[\"" + name + "\"](" + params.join("")+")");
              })(result1[1], result1[5])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instr2() {
        var cacheKey = 'instr2@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "set") {
          var result30 = "set";
          pos += 3;
        } else {
          var result30 = null;
          if (reportMatchFailures) {
            matchFailed("\"set\"");
          }
        }
        if (result30 !== null) {
          var result0 = result30;
        } else {
          if (input.substr(pos, 3) === "SET") {
            var result29 = "SET";
            pos += 3;
          } else {
            var result29 = null;
            if (reportMatchFailures) {
              matchFailed("\"SET\"");
            }
          }
          if (result29 !== null) {
            var result0 = result29;
          } else {
            if (input.substr(pos, 3) === "add") {
              var result28 = "add";
              pos += 3;
            } else {
              var result28 = null;
              if (reportMatchFailures) {
                matchFailed("\"add\"");
              }
            }
            if (result28 !== null) {
              var result0 = result28;
            } else {
              if (input.substr(pos, 3) === "ADD") {
                var result27 = "ADD";
                pos += 3;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"ADD\"");
                }
              }
              if (result27 !== null) {
                var result0 = result27;
              } else {
                if (input.substr(pos, 3) === "sub") {
                  var result26 = "sub";
                  pos += 3;
                } else {
                  var result26 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"sub\"");
                  }
                }
                if (result26 !== null) {
                  var result0 = result26;
                } else {
                  if (input.substr(pos, 3) === "SUB") {
                    var result25 = "SUB";
                    pos += 3;
                  } else {
                    var result25 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"SUB\"");
                    }
                  }
                  if (result25 !== null) {
                    var result0 = result25;
                  } else {
                    if (input.substr(pos, 3) === "mul") {
                      var result24 = "mul";
                      pos += 3;
                    } else {
                      var result24 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"mul\"");
                      }
                    }
                    if (result24 !== null) {
                      var result0 = result24;
                    } else {
                      if (input.substr(pos, 3) === "MUL") {
                        var result23 = "MUL";
                        pos += 3;
                      } else {
                        var result23 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"MUL\"");
                        }
                      }
                      if (result23 !== null) {
                        var result0 = result23;
                      } else {
                        if (input.substr(pos, 3) === "div") {
                          var result22 = "div";
                          pos += 3;
                        } else {
                          var result22 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"div\"");
                          }
                        }
                        if (result22 !== null) {
                          var result0 = result22;
                        } else {
                          if (input.substr(pos, 3) === "DIV") {
                            var result21 = "DIV";
                            pos += 3;
                          } else {
                            var result21 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"DIV\"");
                            }
                          }
                          if (result21 !== null) {
                            var result0 = result21;
                          } else {
                            if (input.substr(pos, 3) === "mod") {
                              var result20 = "mod";
                              pos += 3;
                            } else {
                              var result20 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"mod\"");
                              }
                            }
                            if (result20 !== null) {
                              var result0 = result20;
                            } else {
                              if (input.substr(pos, 3) === "MOD") {
                                var result19 = "MOD";
                                pos += 3;
                              } else {
                                var result19 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"MOD\"");
                                }
                              }
                              if (result19 !== null) {
                                var result0 = result19;
                              } else {
                                if (input.substr(pos, 3) === "shl") {
                                  var result18 = "shl";
                                  pos += 3;
                                } else {
                                  var result18 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"shl\"");
                                  }
                                }
                                if (result18 !== null) {
                                  var result0 = result18;
                                } else {
                                  if (input.substr(pos, 3) === "SHL") {
                                    var result17 = "SHL";
                                    pos += 3;
                                  } else {
                                    var result17 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"SHL\"");
                                    }
                                  }
                                  if (result17 !== null) {
                                    var result0 = result17;
                                  } else {
                                    if (input.substr(pos, 3) === "shr") {
                                      var result16 = "shr";
                                      pos += 3;
                                    } else {
                                      var result16 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"shr\"");
                                      }
                                    }
                                    if (result16 !== null) {
                                      var result0 = result16;
                                    } else {
                                      if (input.substr(pos, 3) === "SHR") {
                                        var result15 = "SHR";
                                        pos += 3;
                                      } else {
                                        var result15 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"SHR\"");
                                        }
                                      }
                                      if (result15 !== null) {
                                        var result0 = result15;
                                      } else {
                                        if (input.substr(pos, 3) === "and") {
                                          var result14 = "and";
                                          pos += 3;
                                        } else {
                                          var result14 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"and\"");
                                          }
                                        }
                                        if (result14 !== null) {
                                          var result0 = result14;
                                        } else {
                                          if (input.substr(pos, 3) === "AND") {
                                            var result13 = "AND";
                                            pos += 3;
                                          } else {
                                            var result13 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"AND\"");
                                            }
                                          }
                                          if (result13 !== null) {
                                            var result0 = result13;
                                          } else {
                                            if (input.substr(pos, 3) === "bor") {
                                              var result12 = "bor";
                                              pos += 3;
                                            } else {
                                              var result12 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"bor\"");
                                              }
                                            }
                                            if (result12 !== null) {
                                              var result0 = result12;
                                            } else {
                                              if (input.substr(pos, 3) === "BOR") {
                                                var result11 = "BOR";
                                                pos += 3;
                                              } else {
                                                var result11 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"BOR\"");
                                                }
                                              }
                                              if (result11 !== null) {
                                                var result0 = result11;
                                              } else {
                                                if (input.substr(pos, 3) === "xor") {
                                                  var result10 = "xor";
                                                  pos += 3;
                                                } else {
                                                  var result10 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"xor\"");
                                                  }
                                                }
                                                if (result10 !== null) {
                                                  var result0 = result10;
                                                } else {
                                                  if (input.substr(pos, 3) === "XOR") {
                                                    var result9 = "XOR";
                                                    pos += 3;
                                                  } else {
                                                    var result9 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\"XOR\"");
                                                    }
                                                  }
                                                  if (result9 !== null) {
                                                    var result0 = result9;
                                                  } else {
                                                    if (input.substr(pos, 3) === "ife") {
                                                      var result8 = "ife";
                                                      pos += 3;
                                                    } else {
                                                      var result8 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\"ife\"");
                                                      }
                                                    }
                                                    if (result8 !== null) {
                                                      var result0 = result8;
                                                    } else {
                                                      if (input.substr(pos, 3) === "IFE") {
                                                        var result7 = "IFE";
                                                        pos += 3;
                                                      } else {
                                                        var result7 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\"IFE\"");
                                                        }
                                                      }
                                                      if (result7 !== null) {
                                                        var result0 = result7;
                                                      } else {
                                                        if (input.substr(pos, 3) === "ifn") {
                                                          var result6 = "ifn";
                                                          pos += 3;
                                                        } else {
                                                          var result6 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\"ifn\"");
                                                          }
                                                        }
                                                        if (result6 !== null) {
                                                          var result0 = result6;
                                                        } else {
                                                          if (input.substr(pos, 3) === "IFN") {
                                                            var result5 = "IFN";
                                                            pos += 3;
                                                          } else {
                                                            var result5 = null;
                                                            if (reportMatchFailures) {
                                                              matchFailed("\"IFN\"");
                                                            }
                                                          }
                                                          if (result5 !== null) {
                                                            var result0 = result5;
                                                          } else {
                                                            if (input.substr(pos, 3) === "ifg") {
                                                              var result4 = "ifg";
                                                              pos += 3;
                                                            } else {
                                                              var result4 = null;
                                                              if (reportMatchFailures) {
                                                                matchFailed("\"ifg\"");
                                                              }
                                                            }
                                                            if (result4 !== null) {
                                                              var result0 = result4;
                                                            } else {
                                                              if (input.substr(pos, 3) === "IFG") {
                                                                var result3 = "IFG";
                                                                pos += 3;
                                                              } else {
                                                                var result3 = null;
                                                                if (reportMatchFailures) {
                                                                  matchFailed("\"IFG\"");
                                                                }
                                                              }
                                                              if (result3 !== null) {
                                                                var result0 = result3;
                                                              } else {
                                                                if (input.substr(pos, 3) === "ifb") {
                                                                  var result2 = "ifb";
                                                                  pos += 3;
                                                                } else {
                                                                  var result2 = null;
                                                                  if (reportMatchFailures) {
                                                                    matchFailed("\"ifb\"");
                                                                  }
                                                                }
                                                                if (result2 !== null) {
                                                                  var result0 = result2;
                                                                } else {
                                                                  if (input.substr(pos, 3) === "IFB") {
                                                                    var result1 = "IFB";
                                                                    pos += 3;
                                                                  } else {
                                                                    var result1 = null;
                                                                    if (reportMatchFailures) {
                                                                      matchFailed("\"IFB\"");
                                                                    }
                                                                  }
                                                                  if (result1 !== null) {
                                                                    var result0 = result1;
                                                                  } else {
                                                                    var result0 = null;;
                                                                  };
                                                                };
                                                              };
                                                            };
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instr1() {
        var cacheKey = 'instr1@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "dat") {
          var result5 = "dat";
          pos += 3;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"dat\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 3) === "DAT") {
            var result3 = "DAT";
            pos += 3;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"DAT\"");
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 3) === "jsr") {
              var result4 = "jsr";
              pos += 3;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"jsr\"");
              }
            }
            if (result4 !== null) {
              var result2 = [result3, result4];
            } else {
              var result2 = null;
              pos = savedPos0;
            }
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 3) === "JSR") {
              var result1 = "JSR";
              pos += 3;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"JSR\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_symbol() {
        var cacheKey = 'symbol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_special();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_other();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_special() {
        var cacheKey = 'special@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "a") {
          var result28 = "a";
          pos += 1;
        } else {
          var result28 = null;
          if (reportMatchFailures) {
            matchFailed("\"a\"");
          }
        }
        if (result28 !== null) {
          var result1 = result28;
        } else {
          if (input.substr(pos, 1) === "A") {
            var result27 = "A";
            pos += 1;
          } else {
            var result27 = null;
            if (reportMatchFailures) {
              matchFailed("\"A\"");
            }
          }
          if (result27 !== null) {
            var result1 = result27;
          } else {
            if (input.substr(pos, 1) === "b") {
              var result26 = "b";
              pos += 1;
            } else {
              var result26 = null;
              if (reportMatchFailures) {
                matchFailed("\"b\"");
              }
            }
            if (result26 !== null) {
              var result1 = result26;
            } else {
              if (input.substr(pos, 1) === "B") {
                var result25 = "B";
                pos += 1;
              } else {
                var result25 = null;
                if (reportMatchFailures) {
                  matchFailed("\"B\"");
                }
              }
              if (result25 !== null) {
                var result1 = result25;
              } else {
                if (input.substr(pos, 1) === "c") {
                  var result24 = "c";
                  pos += 1;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"c\"");
                  }
                }
                if (result24 !== null) {
                  var result1 = result24;
                } else {
                  if (input.substr(pos, 1) === "C") {
                    var result23 = "C";
                    pos += 1;
                  } else {
                    var result23 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"C\"");
                    }
                  }
                  if (result23 !== null) {
                    var result1 = result23;
                  } else {
                    if (input.substr(pos, 1) === "x") {
                      var result22 = "x";
                      pos += 1;
                    } else {
                      var result22 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"x\"");
                      }
                    }
                    if (result22 !== null) {
                      var result1 = result22;
                    } else {
                      if (input.substr(pos, 1) === "X") {
                        var result21 = "X";
                        pos += 1;
                      } else {
                        var result21 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"X\"");
                        }
                      }
                      if (result21 !== null) {
                        var result1 = result21;
                      } else {
                        if (input.substr(pos, 1) === "y") {
                          var result20 = "y";
                          pos += 1;
                        } else {
                          var result20 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"y\"");
                          }
                        }
                        if (result20 !== null) {
                          var result1 = result20;
                        } else {
                          if (input.substr(pos, 1) === "Y") {
                            var result19 = "Y";
                            pos += 1;
                          } else {
                            var result19 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"Y\"");
                            }
                          }
                          if (result19 !== null) {
                            var result1 = result19;
                          } else {
                            if (input.substr(pos, 1) === "z") {
                              var result18 = "z";
                              pos += 1;
                            } else {
                              var result18 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"z\"");
                              }
                            }
                            if (result18 !== null) {
                              var result1 = result18;
                            } else {
                              if (input.substr(pos, 1) === "Z") {
                                var result17 = "Z";
                                pos += 1;
                              } else {
                                var result17 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"Z\"");
                                }
                              }
                              if (result17 !== null) {
                                var result1 = result17;
                              } else {
                                if (input.substr(pos, 1) === "i") {
                                  var result16 = "i";
                                  pos += 1;
                                } else {
                                  var result16 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"i\"");
                                  }
                                }
                                if (result16 !== null) {
                                  var result1 = result16;
                                } else {
                                  if (input.substr(pos, 1) === "I") {
                                    var result15 = "I";
                                    pos += 1;
                                  } else {
                                    var result15 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"I\"");
                                    }
                                  }
                                  if (result15 !== null) {
                                    var result1 = result15;
                                  } else {
                                    if (input.substr(pos, 1) === "j") {
                                      var result14 = "j";
                                      pos += 1;
                                    } else {
                                      var result14 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"j\"");
                                      }
                                    }
                                    if (result14 !== null) {
                                      var result1 = result14;
                                    } else {
                                      if (input.substr(pos, 1) === "J") {
                                        var result13 = "J";
                                        pos += 1;
                                      } else {
                                        var result13 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"J\"");
                                        }
                                      }
                                      if (result13 !== null) {
                                        var result1 = result13;
                                      } else {
                                        if (input.substr(pos, 2) === "sp") {
                                          var result12 = "sp";
                                          pos += 2;
                                        } else {
                                          var result12 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\"sp\"");
                                          }
                                        }
                                        if (result12 !== null) {
                                          var result1 = result12;
                                        } else {
                                          if (input.substr(pos, 2) === "SP") {
                                            var result11 = "SP";
                                            pos += 2;
                                          } else {
                                            var result11 = null;
                                            if (reportMatchFailures) {
                                              matchFailed("\"SP\"");
                                            }
                                          }
                                          if (result11 !== null) {
                                            var result1 = result11;
                                          } else {
                                            if (input.substr(pos, 2) === "pc") {
                                              var result10 = "pc";
                                              pos += 2;
                                            } else {
                                              var result10 = null;
                                              if (reportMatchFailures) {
                                                matchFailed("\"pc\"");
                                              }
                                            }
                                            if (result10 !== null) {
                                              var result1 = result10;
                                            } else {
                                              if (input.substr(pos, 2) === "PC") {
                                                var result9 = "PC";
                                                pos += 2;
                                              } else {
                                                var result9 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\"PC\"");
                                                }
                                              }
                                              if (result9 !== null) {
                                                var result1 = result9;
                                              } else {
                                                if (input.substr(pos, 4) === "push") {
                                                  var result8 = "push";
                                                  pos += 4;
                                                } else {
                                                  var result8 = null;
                                                  if (reportMatchFailures) {
                                                    matchFailed("\"push\"");
                                                  }
                                                }
                                                if (result8 !== null) {
                                                  var result1 = result8;
                                                } else {
                                                  if (input.substr(pos, 4) === "PUSH") {
                                                    var result7 = "PUSH";
                                                    pos += 4;
                                                  } else {
                                                    var result7 = null;
                                                    if (reportMatchFailures) {
                                                      matchFailed("\"PUSH\"");
                                                    }
                                                  }
                                                  if (result7 !== null) {
                                                    var result1 = result7;
                                                  } else {
                                                    if (input.substr(pos, 3) === "pop") {
                                                      var result6 = "pop";
                                                      pos += 3;
                                                    } else {
                                                      var result6 = null;
                                                      if (reportMatchFailures) {
                                                        matchFailed("\"pop\"");
                                                      }
                                                    }
                                                    if (result6 !== null) {
                                                      var result1 = result6;
                                                    } else {
                                                      if (input.substr(pos, 3) === "POP") {
                                                        var result5 = "POP";
                                                        pos += 3;
                                                      } else {
                                                        var result5 = null;
                                                        if (reportMatchFailures) {
                                                          matchFailed("\"POP\"");
                                                        }
                                                      }
                                                      if (result5 !== null) {
                                                        var result1 = result5;
                                                      } else {
                                                        if (input.substr(pos, 4) === "peek") {
                                                          var result4 = "peek";
                                                          pos += 4;
                                                        } else {
                                                          var result4 = null;
                                                          if (reportMatchFailures) {
                                                            matchFailed("\"peek\"");
                                                          }
                                                        }
                                                        if (result4 !== null) {
                                                          var result1 = result4;
                                                        } else {
                                                          if (input.substr(pos, 4) === "PEEK") {
                                                            var result3 = "PEEK";
                                                            pos += 4;
                                                          } else {
                                                            var result3 = null;
                                                            if (reportMatchFailures) {
                                                              matchFailed("\"PEEK\"");
                                                            }
                                                          }
                                                          if (result3 !== null) {
                                                            var result1 = result3;
                                                          } else {
                                                            var result1 = null;;
                                                          };
                                                        };
                                                      };
                                                    };
                                                  };
                                                };
                                              };
                                            };
                                          };
                                        };
                                      };
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        var result2 = result1 !== null
          ? (function(special) { return special.toLowerCase(); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_other() {
        var cacheKey = 'other@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(first, rest) { return first + rest.join("");})(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operand() {
        var cacheKey = 'operand@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_symbol();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_literal();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_address();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_address() {
        var cacheKey = 'address@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        if (input.substr(pos, 1) === "[") {
          var result20 = "[";
          pos += 1;
        } else {
          var result20 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result20 !== null) {
          var result21 = parse__();
          if (result21 !== null) {
            var result22 = parse_literal();
            if (result22 !== null) {
              var result23 = parse__();
              if (result23 !== null) {
                if (input.substr(pos, 1) === "+") {
                  var result24 = "+";
                  pos += 1;
                } else {
                  var result24 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+\"");
                  }
                }
                if (result24 !== null) {
                  var result25 = parse__();
                  if (result25 !== null) {
                    var result26 = parse_symbol();
                    if (result26 !== null) {
                      var result27 = parse__();
                      if (result27 !== null) {
                        if (input.substr(pos, 1) === "]") {
                          var result28 = "]";
                          pos += 1;
                        } else {
                          var result28 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (result28 !== null) {
                          var result18 = [result20, result21, result22, result23, result24, result25, result26, result27, result28];
                        } else {
                          var result18 = null;
                          pos = savedPos5;
                        }
                      } else {
                        var result18 = null;
                        pos = savedPos5;
                      }
                    } else {
                      var result18 = null;
                      pos = savedPos5;
                    }
                  } else {
                    var result18 = null;
                    pos = savedPos5;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos5;
                }
              } else {
                var result18 = null;
                pos = savedPos5;
              }
            } else {
              var result18 = null;
              pos = savedPos5;
            }
          } else {
            var result18 = null;
            pos = savedPos5;
          }
        } else {
          var result18 = null;
          pos = savedPos5;
        }
        var result19 = result18 !== null
          ? (function(literal, symbol) {return "[" + literal + " + " + symbol + "]";})(result18[2], result18[6])
          : null;
        if (result19 !== null) {
          var result17 = result19;
        } else {
          var result17 = null;
          pos = savedPos4;
        }
        if (result17 !== null) {
          var result0 = result17;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === "[") {
            var result12 = "[";
            pos += 1;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("\"[\"");
            }
          }
          if (result12 !== null) {
            var result13 = parse__();
            if (result13 !== null) {
              var result14 = parse_literal();
              if (result14 !== null) {
                var result15 = parse__();
                if (result15 !== null) {
                  if (input.substr(pos, 1) === "]") {
                    var result16 = "]";
                    pos += 1;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (result16 !== null) {
                    var result10 = [result12, result13, result14, result15, result16];
                  } else {
                    var result10 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result10 = null;
                  pos = savedPos3;
                }
              } else {
                var result10 = null;
                pos = savedPos3;
              }
            } else {
              var result10 = null;
              pos = savedPos3;
            }
          } else {
            var result10 = null;
            pos = savedPos3;
          }
          var result11 = result10 !== null
            ? (function(literal) {return "[" + literal + "]";})(result10[2])
            : null;
          if (result11 !== null) {
            var result9 = result11;
          } else {
            var result9 = null;
            pos = savedPos2;
          }
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "[") {
              var result4 = "[";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"[\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse__();
              if (result5 !== null) {
                var result6 = parse_symbol();
                if (result6 !== null) {
                  var result7 = parse__();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === "]") {
                      var result8 = "]";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (result8 !== null) {
                      var result2 = [result4, result5, result6, result7, result8];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(symbol) {return "[" + symbol + "]";})(result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9A-Fa-fx]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9A-Fa-fx]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9A-Fa-fx]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9A-Fa-fx]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) {return digits.join("");})(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result4 = parse_whiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_lineTerminator();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_lineComment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_whiteSpace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_lineTerminator();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_lineComment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whiteSpace() {
        var cacheKey = 'whiteSpace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[	 \xA0\uFEFF]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[	 \\xA0\\uFEFF]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lineTerminator() {
        var cacheKey = 'lineTerminator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lineComment() {
        var cacheKey = 'lineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ";") {
          var result1 = ";";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\";\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_lineTerminator();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result5 = parse_anyCharacter();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_lineTerminator();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              var result5 = parse_anyCharacter();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_anyCharacter() {
        var cacheKey = 'anyCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.length > pos) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        macros = {};
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
