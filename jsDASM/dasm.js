dasm = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "_": parse__,
        "address": parse_address,
        "adrliteral": parse_adrliteral,
        "adrsymbol": parse_adrsymbol,
        "dasm": parse_dasm,
        "dat": parse_dat,
        "decimal": parse_decimal,
        "decimaldigits": parse_decimaldigits,
        "hex": parse_hex,
        "hexdigits": parse_hexdigits,
        "instr": parse_instr,
        "jsr": parse_jsr,
        "label": parse_label,
        "literal": parse_literal,
        "op": parse_op,
        "operand": parse_operand,
        "regoffset": parse_regoffset,
        "str": parse_str,
        "symbol": parse_symbol,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "dasm";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_dasm() {
        var cacheKey = 'dasm@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result7 = parse_jsr();
        if (result7 !== null) {
          var result3 = result7;
        } else {
          var result6 = parse_dat();
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result5 = parse_op();
            if (result5 !== null) {
              var result3 = result5;
            } else {
              var result4 = parse_label();
              if (result4 !== null) {
                var result3 = result4;
              } else {
                var result3 = null;;
              };
            };
          };
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result7 = parse_jsr();
            if (result7 !== null) {
              var result3 = result7;
            } else {
              var result6 = parse_dat();
              if (result6 !== null) {
                var result3 = result6;
              } else {
                var result5 = parse_op();
                if (result5 !== null) {
                  var result3 = result5;
                } else {
                  var result4 = parse_label();
                  if (result4 !== null) {
                    var result3 = result4;
                  } else {
                    var result3 = null;;
                  };
                };
              };
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(lines) {
          	var labels = {};
          	var offset = 0;
          	var output = [];
          
                  function predelabelize(param) {
                      if (param.symbaddr != undefined) {
                           return [30,param.symbaddr];
                      }
          	    if (param.label != undefined) {
          	         return [31,param];
          	    }
          	    return param;
          	}
          	
          	function postdelabelize(program) {
          	    console.log("pdlabel labels: ", labels);
          	    console.log("pdlabel program: ", program);
          	    for (var pos in program) {
          	        var cell = program[pos];
          		console.log("pdlabel pos:",pos,"cell:", cell);
          		if (cell.label != undefined) {
          		    program[pos] = labels[cell.label];
          		}
          	    }
          	    return program;	    
          	}
          
          	for (var i in lines) {
          	    var line = lines[i];
          
          	    console.log("offset:",offset, "line:" , JSON.stringify(line));
          
          	    if (line.label != undefined) {
          		labels[line.label.label] = offset;
          	    }
          
          	    else if (line.data != undefined) {
          	        if (line.data.str != undefined) {
          		   for (var i = 0; i < line.data.str.length; i++) {
          		       output.push(line.data.str.charCodeAt(i));
          		   }
          		   offset += line.data.str.length;
          		}
          	        else if (line.data.label != undefined) {
          		    output.push(line.data);
                          offset++;
          		}
          		else {		
                          output.push(line.data);
                          offset++;
          		}
          
          	    }
          	    
          	    else if (line.jsr != undefined) {
          		var zeroop = 0;
          		var oooooo = 0x01;
          		var aaaaaa = predelabelize(line.jsr);
          		output.push(((0x0 | zeroop) | oooooo << 4) | aaaaaa[0] << 10);
          		
          		if (aaaaaa.length == 2) {
          		    output.push(aaaaaa[1]);
          		    offset++;
                          } 
          		
          		offset++;
          	    }
          	    
          	    else {
          		    var oooo = line[0];
          		    var aaaaaa = predelabelize(line[1]);
          		    var bbbbbb = predelabelize(line[2]);
          		    output.push(((0x0 | oooo) | aaaaaa[0] << 4) | bbbbbb[0] << 10);
          		    if (aaaaaa.length == 2) {
          			output.push(aaaaaa[1]);
          			offset++;
                              } 
          		    if (bbbbbb.length == 2) {
          			output.push(bbbbbb[1]);
          			offset++;
                              } 
          		    offset++;
          		}
          	}
          	postdelabelize(output);
          	return output;
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_dat() {
        var cacheKey = 'dat@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 3) === "dat") {
            var result4 = "dat";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"dat\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result11 = parse_hex();
              if (result11 !== null) {
                var result6 = result11;
              } else {
                var result10 = parse_decimal();
                if (result10 !== null) {
                  var result6 = result10;
                } else {
                  var result9 = parse_symbol();
                  if (result9 !== null) {
                    var result6 = result9;
                  } else {
                    var result8 = parse_str();
                    if (result8 !== null) {
                      var result6 = result8;
                    } else {
                      var result6 = null;;
                    };
                  };
                };
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(data) {
              return {"data": data};
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_jsr() {
        var cacheKey = 'jsr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 3) === "jsr") {
            var result4 = "jsr";
            pos += 3;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"jsr\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result9 = parse_literal();
              if (result9 !== null) {
                var result6 = result9;
              } else {
                var result8 = parse_symbol();
                if (result8 !== null) {
                  var result6 = result8;
                } else {
                  var result6 = null;;
                };
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(jsr) {
              return {"jsr": jsr};
          })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_op() {
        var cacheKey = 'op@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_instr();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result6 = parse_operand();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ",") {
                    var result8 = ",";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\",\"");
                    }
                  }
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      var result10 = parse_operand();
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(instr, op1, op2) {return [instr,op1, op2];})(result1[1], result1[3], result1[7])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_label() {
        var cacheKey = 'label@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ":") {
            var result4 = ":";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\":\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_symbol();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(sym) {return {'label': sym};})(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_instr() {
        var cacheKey = 'instr@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos14 = pos;
        if (input.substr(pos, 3) === "set") {
          var result44 = "set";
          pos += 3;
        } else {
          var result44 = null;
          if (reportMatchFailures) {
            matchFailed("\"set\"");
          }
        }
        var result45 = result44 !== null
          ? (function() {return 1;})()
          : null;
        if (result45 !== null) {
          var result43 = result45;
        } else {
          var result43 = null;
          pos = savedPos14;
        }
        if (result43 !== null) {
          var result0 = result43;
        } else {
          var savedPos13 = pos;
          if (input.substr(pos, 3) === "add") {
            var result41 = "add";
            pos += 3;
          } else {
            var result41 = null;
            if (reportMatchFailures) {
              matchFailed("\"add\"");
            }
          }
          var result42 = result41 !== null
            ? (function() {return 2;})()
            : null;
          if (result42 !== null) {
            var result40 = result42;
          } else {
            var result40 = null;
            pos = savedPos13;
          }
          if (result40 !== null) {
            var result0 = result40;
          } else {
            var savedPos12 = pos;
            if (input.substr(pos, 3) === "sub") {
              var result38 = "sub";
              pos += 3;
            } else {
              var result38 = null;
              if (reportMatchFailures) {
                matchFailed("\"sub\"");
              }
            }
            var result39 = result38 !== null
              ? (function() {return 3;})()
              : null;
            if (result39 !== null) {
              var result37 = result39;
            } else {
              var result37 = null;
              pos = savedPos12;
            }
            if (result37 !== null) {
              var result0 = result37;
            } else {
              var savedPos11 = pos;
              if (input.substr(pos, 3) === "mul") {
                var result35 = "mul";
                pos += 3;
              } else {
                var result35 = null;
                if (reportMatchFailures) {
                  matchFailed("\"mul\"");
                }
              }
              var result36 = result35 !== null
                ? (function() {return 4;})()
                : null;
              if (result36 !== null) {
                var result34 = result36;
              } else {
                var result34 = null;
                pos = savedPos11;
              }
              if (result34 !== null) {
                var result0 = result34;
              } else {
                var savedPos10 = pos;
                if (input.substr(pos, 3) === "div") {
                  var result32 = "div";
                  pos += 3;
                } else {
                  var result32 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"div\"");
                  }
                }
                var result33 = result32 !== null
                  ? (function() {return 5;})()
                  : null;
                if (result33 !== null) {
                  var result31 = result33;
                } else {
                  var result31 = null;
                  pos = savedPos10;
                }
                if (result31 !== null) {
                  var result0 = result31;
                } else {
                  var savedPos9 = pos;
                  if (input.substr(pos, 3) === "mod") {
                    var result29 = "mod";
                    pos += 3;
                  } else {
                    var result29 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"mod\"");
                    }
                  }
                  var result30 = result29 !== null
                    ? (function() {return 6;})()
                    : null;
                  if (result30 !== null) {
                    var result28 = result30;
                  } else {
                    var result28 = null;
                    pos = savedPos9;
                  }
                  if (result28 !== null) {
                    var result0 = result28;
                  } else {
                    var savedPos8 = pos;
                    if (input.substr(pos, 3) === "shl") {
                      var result26 = "shl";
                      pos += 3;
                    } else {
                      var result26 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"shl\"");
                      }
                    }
                    var result27 = result26 !== null
                      ? (function() {return 7;})()
                      : null;
                    if (result27 !== null) {
                      var result25 = result27;
                    } else {
                      var result25 = null;
                      pos = savedPos8;
                    }
                    if (result25 !== null) {
                      var result0 = result25;
                    } else {
                      var savedPos7 = pos;
                      if (input.substr(pos, 3) === "shr") {
                        var result23 = "shr";
                        pos += 3;
                      } else {
                        var result23 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"shr\"");
                        }
                      }
                      var result24 = result23 !== null
                        ? (function() {return 8;})()
                        : null;
                      if (result24 !== null) {
                        var result22 = result24;
                      } else {
                        var result22 = null;
                        pos = savedPos7;
                      }
                      if (result22 !== null) {
                        var result0 = result22;
                      } else {
                        var savedPos6 = pos;
                        if (input.substr(pos, 3) === "and") {
                          var result20 = "and";
                          pos += 3;
                        } else {
                          var result20 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"and\"");
                          }
                        }
                        var result21 = result20 !== null
                          ? (function() {return 9;})()
                          : null;
                        if (result21 !== null) {
                          var result19 = result21;
                        } else {
                          var result19 = null;
                          pos = savedPos6;
                        }
                        if (result19 !== null) {
                          var result0 = result19;
                        } else {
                          var savedPos5 = pos;
                          if (input.substr(pos, 3) === "bor") {
                            var result17 = "bor";
                            pos += 3;
                          } else {
                            var result17 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"bor\"");
                            }
                          }
                          var result18 = result17 !== null
                            ? (function() {return 10;})()
                            : null;
                          if (result18 !== null) {
                            var result16 = result18;
                          } else {
                            var result16 = null;
                            pos = savedPos5;
                          }
                          if (result16 !== null) {
                            var result0 = result16;
                          } else {
                            var savedPos4 = pos;
                            if (input.substr(pos, 3) === "xor") {
                              var result14 = "xor";
                              pos += 3;
                            } else {
                              var result14 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"xor\"");
                              }
                            }
                            var result15 = result14 !== null
                              ? (function() {return 11;})()
                              : null;
                            if (result15 !== null) {
                              var result13 = result15;
                            } else {
                              var result13 = null;
                              pos = savedPos4;
                            }
                            if (result13 !== null) {
                              var result0 = result13;
                            } else {
                              var savedPos3 = pos;
                              if (input.substr(pos, 3) === "ife") {
                                var result11 = "ife";
                                pos += 3;
                              } else {
                                var result11 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"ife\"");
                                }
                              }
                              var result12 = result11 !== null
                                ? (function() {return 12;})()
                                : null;
                              if (result12 !== null) {
                                var result10 = result12;
                              } else {
                                var result10 = null;
                                pos = savedPos3;
                              }
                              if (result10 !== null) {
                                var result0 = result10;
                              } else {
                                var savedPos2 = pos;
                                if (input.substr(pos, 3) === "ifn") {
                                  var result8 = "ifn";
                                  pos += 3;
                                } else {
                                  var result8 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"ifn\"");
                                  }
                                }
                                var result9 = result8 !== null
                                  ? (function() {return 13;})()
                                  : null;
                                if (result9 !== null) {
                                  var result7 = result9;
                                } else {
                                  var result7 = null;
                                  pos = savedPos2;
                                }
                                if (result7 !== null) {
                                  var result0 = result7;
                                } else {
                                  var savedPos1 = pos;
                                  if (input.substr(pos, 3) === "ifg") {
                                    var result5 = "ifg";
                                    pos += 3;
                                  } else {
                                    var result5 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"ifg\"");
                                    }
                                  }
                                  var result6 = result5 !== null
                                    ? (function() {return 14;})()
                                    : null;
                                  if (result6 !== null) {
                                    var result4 = result6;
                                  } else {
                                    var result4 = null;
                                    pos = savedPos1;
                                  }
                                  if (result4 !== null) {
                                    var result0 = result4;
                                  } else {
                                    var savedPos0 = pos;
                                    if (input.substr(pos, 3) === "ifb") {
                                      var result2 = "ifb";
                                      pos += 3;
                                    } else {
                                      var result2 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"ifb\"");
                                      }
                                    }
                                    var result3 = result2 !== null
                                      ? (function() {return 15;})()
                                      : null;
                                    if (result3 !== null) {
                                      var result1 = result3;
                                    } else {
                                      var result1 = null;
                                      pos = savedPos0;
                                    }
                                    if (result1 !== null) {
                                      var result0 = result1;
                                    } else {
                                      var result0 = null;;
                                    };
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_operand() {
        var cacheKey = 'operand@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_symbol();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_literal();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_address();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_symbol() {
        var cacheKey = 'symbol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[a-zA-Z_]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z_]");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[a-zA-Z0-9_]");
            }
          }
          while (result5 !== null) {
            result4.push(result5);
            if (input.substr(pos).match(/^[a-zA-Z0-9_]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("[a-zA-Z0-9_]");
              }
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, rest) {
          	s = start + rest.join("");
          	special = {"a":0,"b":1,"c":2,"x":3,"y":4,"z":5,"i":6,"j":7,
          		   "pop":24,"peek":25,"push":26,
          		   "sp":27,"pc":28,"o":29};
          	specialv = special[s];
          	console.log("symbol: " + s +", spec: " + specialv);
          	if (specialv == undefined) {
          	    return {"label":s};
          	}
          	else {
          	    return [specialv];
          	}
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_hex();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_decimal();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(value) {
          	if (value < 32) {
          	    return [value + 32];
          	}
          	else {
          	    return [31, value];
          	}
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_address() {
        var cacheKey = 'address@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "[") {
          var result1 = "[";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"[\"");
          }
        }
        if (result1 !== null) {
          var result2 = parse__();
          if (result2 !== null) {
            var result8 = parse_regoffset();
            if (result8 !== null) {
              var result3 = result8;
            } else {
              var result7 = parse_adrliteral();
              if (result7 !== null) {
                var result3 = result7;
              } else {
                var result6 = parse_adrsymbol();
                if (result6 !== null) {
                  var result3 = result6;
                } else {
                  var result3 = null;;
                };
              };
            }
            if (result3 !== null) {
              var result4 = parse__();
              if (result4 !== null) {
                if (input.substr(pos, 1) === "]") {
                  var result5 = "]";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"]\"");
                  }
                }
                if (result5 !== null) {
                  var result0 = [result1, result2, result3, result4, result5];
                } else {
                  var result0 = null;
                  pos = savedPos0;
                }
              } else {
                var result0 = null;
                pos = savedPos0;
              }
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adrliteral() {
        var cacheKey = 'adrliteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_hex();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_decimal();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(adrliteral) {
          	return [30, adrliteral];
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_adrsymbol() {
        var cacheKey = 'adrsymbol@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_symbol();
        var result2 = result1 !== null
          ? (function(symbol) {
          	if (symbol.label == undefined) { // is a register
          	    return [symbol[0] + 8];
          	}
          	else {
          	    return {"symbaddr":symbol};
          	}
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_regoffset() {
        var cacheKey = 'regoffset@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result9 = parse_hex();
        if (result9 !== null) {
          var result3 = result9;
        } else {
          var result8 = parse_decimal();
          if (result8 !== null) {
            var result3 = result8;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "+") {
              var result5 = "+";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"+\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                var result7 = parse_symbol();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(offsetliteral, register) {
          	console.log("reg off addr: " , offsetliteral, "+", register);
          	return [register[0] + 16, offsetliteral];
              })(result1[0], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hex() {
        var cacheKey = 'hex@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "0x") {
          var result3 = "0x";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"0x\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_hexdigits();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value) {
          	return value;
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_decimal() {
        var cacheKey = 'decimal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_decimaldigits();
        var result2 = result1 !== null
          ? (function(value) { 
          	return value;
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_hexdigits() {
        var cacheKey = 'hexdigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9a-fA-F]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(hexdigits) {
          	return parseInt(hexdigits.join(""), 16); 
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_decimaldigits() {
        var cacheKey = 'decimaldigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result3 = input.charAt(pos);
          pos++;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result3 = input.charAt(pos);
              pos++;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) { 
          	return parseInt(digits.join(""), 10); 
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_str() {
        var cacheKey = 'str@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result3 = "\"";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result3 !== null) {
          var result4 = [];
          if (input.substr(pos).match(/^[^"]/) !== null) {
            var result6 = input.charAt(pos);
            pos++;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("[^\"]");
            }
          }
          while (result6 !== null) {
            result4.push(result6);
            if (input.substr(pos).match(/^[^"]/) !== null) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("[^\"]");
              }
            }
          }
          if (result4 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result5 = "\"";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(str) {
                  return {"str": str.join("")};
              })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result0 = [];
        var result1 = parse_whitespace();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_whitespace();
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[ 	\n\r]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	\\n\\r]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        var macros = {};
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
